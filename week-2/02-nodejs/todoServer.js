/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs')
  
  const app = express();
  
  let todos = []
  let lastId = 1;
  
  app.use(bodyParser.json());

  app.get("/todos", (req, res) => {
    return res.status(200).json(todos)
  })

  app.get("/todos/:id", (req, res) => {
    const index = req.params.id
    itemFound = false
    todos.forEach((todo, ind) => {
      if(todo.id == index){
        itemFound = true
        return res.status(200).json(todo)
      }
    })
    if(!itemFound){
      return res.status(404).json("Not Found")
    }
  })

  app.post("/todos", (req, res) => {
    const todoItem = req.body
    const todo = {
      id: lastId,
      title: todoItem.title,
      completed: todoItem.completed,
      description: todoItem.description,
    }
    todos.push(todo)
    lastId += 1
    return res.status(201).json({"id": todo.id})
  })

  app.put("/todos/:id", (req, res) => {
    const index = req.params.id
    const todoItem = req.body
    const todoObj = {
      id: index,
      title: todoItem.title,
      completed: todoItem.completed,
      description: todoItem.description,
    }
    todos.forEach((todo, ind) => {
      if(todo.id == index){
        todos[ind] = todoObj
        return res.status(200).json({msg: "Todo updated"})
      }
    })
    return res.status(404).json("Item not found")
  })

  app.delete("/todos/:id", (req, res) => {
    const indexOfTodo = req.params.id
    const updatedTodos = todos.filter(element => {
      return indexOfTodo !== element.id.toString()
    })
    if(updatedTodos.length == todos.length){
      return res.status(404).json("Index not found")
    }

    return res.status(200).json("Deleted Successfully")
  })
  
  module.exports = app;